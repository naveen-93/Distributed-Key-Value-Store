syntax = "proto3";
package kvstore;

option go_package = "kvstore/proto";

// Client-facing service
service KVStore {
  rpc Get(GetRequest) returns (GetResponse) {}
  rpc Put(PutRequest) returns (PutResponse) {}
  rpc GetRingState(RingStateRequest) returns (RingStateResponse) {}
}

// Node-to-node service
service NodeInternal {
  rpc Replicate(ReplicateRequest) returns (ReplicateResponse) {}
  rpc SyncKeys(SyncRequest) returns (SyncResponse) {}
  rpc Heartbeat(Ping) returns (Pong) {}
  rpc GarbageCollect(GarbageCollectRequest) returns (GarbageCollectResponse) {}
  rpc GetReplica(GetReplicaRequest) returns (GetReplicaResponse) {}
  rpc AddNode(AddNodeRequest) returns (Empty);
}

message AddNodeRequest {
  string node_id = 1;
  string addr = 2;
}
message Empty {}

message GetRequest {
  string key = 1;
  uint64 client_id = 2;
  uint64 request_id = 3;
}

message GetResponse {
  string value = 1;
  bool exists = 2;
  string error = 3;
  uint64 timestamp = 4;  // For conflict resolution
}

message PutRequest {
  string key = 1;
  string value = 2;
  uint64 client_id = 3;
  uint64 request_id = 4;
  uint64 timestamp = 5;  // For conflict resolution
}

message PutResponse {
  string old_value = 1;
  bool had_old_value = 2;
  string error = 3;
  uint64 old_timestamp = 4;  // Timestamp of the old value
}

// New messages for node-to-node communication
message ReplicateRequest {
  string key = 1;
  string value = 2;
  uint64 timestamp = 3;  // (node_id << 32) | logical_clock
}

message ReplicateResponse {
  bool success = 1;
  string error = 2;
}

message SyncRequest {
  map<string, uint64> key_timestamps = 1;
  bytes bloom_filter = 2;  // Add Bloom filter field
  map<string, string> key_ranges = 3;
}

message SyncResponse {
  map<string, KeyValue> missing = 1;
  map<string, uint64> deletions = 2;  // Changed from stale_tombstones to deletions
}

message KeyValue {
  string value = 1;
  uint64 timestamp = 2;
  bool is_tombstone = 3;  // New field
  uint64 ttl = 4;         // Tombstone time-to-live (seconds)
}

message Ping {
  uint32 node_id = 1;
  uint64 timestamp = 2;
}

message Pong {
  uint32 node_id = 1;
  uint64 timestamp = 2;
  bool is_leader = 3;
}

message RingStateRequest {}

message RingStateResponse {
  uint64 version = 1;
  map<string, bool> nodes = 2;
  int64 updated_at = 3;
}

message GetReplicaRequest {
  string key = 1;
}

message GetReplicaResponse {
  string value = 1;
  uint64 timestamp = 2;
  bool exists = 3;
  bool is_tombstone = 4;
}

// Add GarbageCollect message definitions
message GarbageCollectRequest {
    map<string, uint64> tombstone_timestamps = 1;
}

message GarbageCollectResponse {
    bool success = 1;
    string error = 2;
    map<string, uint64> cleaned_keys = 3;
}